{"ast":null,"code":"var _jsxFileName = \"/Users/yavuzhanis/Desktop/Yavuzhan-Bu\\u0308tu\\u0308nBelgeler/YavuzhanYaz\\u0131l\\u0131mKlaso\\u0308r/clonePROJECTS/candyCrush-react/candy-crush/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport ScoreBoard from './components/ScoreBoard';\nimport blueCandy from './images/blue-candy.png';\nimport redCandy from './images/red-candy.png';\nimport greenCandy from './images/green-candy.png';\nimport yellowCandy from './images/yellow-candy.png';\nimport purpleCandy from './images/purple-candy.png';\nimport orangeCandy from './images/orange-candy.png';\nimport blank from './images/blank.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [blueCandy, greenCandy, yellowCandy, orangeCandy, redCandy, purpleCandy];\nfunction App() {\n  _s();\n  const [currentColorArrangament, setCurrentColorArrangament] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangament[i];\n      if (columnOfFour.every(square => currentColorArrangament[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangament[square] = blank);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangament[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      if (notValid.includes(i)) continue;\n      if (rowOfFour.every(square => currentColorArrangament[square] === decidedColor)) {\n        rowOfFour.forEach(square => currentColorArrangament[square] = blank);\n        return true;\n      }\n    }\n  };\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangament[i];\n      if (columnOfThree.every(square => currentColorArrangament[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangament[square] = blank);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangament[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      if (notValid.includes(i)) continue;\n      if (rowOfThree.every(square => currentColorArrangament[square] === decidedColor)) {\n        rowOfThree.forEach(square => currentColorArrangament[square] = blank);\n        return true;\n      }\n    }\n  };\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n      if (isFirstRow && currentColorArrangament[i] == blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangament[i] = candyColors[randomNumber];\n      }\n      if (currentColorArrangament[i + width] === blank) {\n        currentColorArrangament[i + width] = currentColorArrangament[i];\n        currentColorArrangament[i] = blank;\n      }\n    }\n  };\n  const dragStart = e => {\n    console.log('drag Start');\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = e => {\n    console.log('drag drop');\n    setSquareBeingReplaced(e.target);\n  };\n  const dragEnd = e => {\n    console.log('drag end');\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n    const squareBeingReplaceId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n    currentColorArrangament[squareBeingReplaceId] = squareBeingDragged.getAttribute('src');\n    currentColorArrangament[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n    console.log('square being dragged ID : ', squareBeingDraggedId);\n    console.log('squareBeingReplace ID : ', squareBeingReplaceId);\n    const validMoves = [squareBeingDraggedId - 1, squareBeingDraggedId - width, squareBeingDraggedId + 1, squareBeingDraggedId + width];\n    const validMove = validMoves.includes(squareBeingReplaceId);\n    const isAcolumnOfFour = checkForColumnOfFour();\n    const isArowOfFour = checkForRowOfFour();\n    const isAcolumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n    if (squareBeingReplaceId && validMove && (isARowOfThree || isArowOfFour || isAcolumnOfFour || isAcolumnOfThree)) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangament[squareBeingReplaceId] = squareBeingReplaced.getAttribute('src');\n      currentColorArrangament[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n      setCurrentColorArrangament([...currentColorArrangament]);\n    }\n  };\n  const createBoard = () => {\n    const randomColorArrangament = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomNumberfrom0to5 = Math.floor(Math.random() * candyColors.length);\n      const randomColor = candyColors[randomNumberfrom0to5];\n      randomColorArrangament.push(randomColor);\n    }\n    ;\n    setCurrentColorArrangament(randomColorArrangament);\n  };\n  useEffect(() => {\n    createBoard();\n  }, [width]);\n  useEffect(() => {\n    const Timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangament([...currentColorArrangament]);\n    }, 100);\n    return () => clearInterval(Timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangament]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangament.map((candyColor, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: candyColor,\n        alt: candyColor,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: scoreDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KGBxPiSaislxVnual3kMNWwEG08=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ScoreBoard","blueCandy","redCandy","greenCandy","yellowCandy","purpleCandy","orangeCandy","blank","jsxDEV","_jsxDEV","width","candyColors","App","_s","currentColorArrangament","setCurrentColorArrangament","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","decidedColor","every","square","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","console","log","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplaceId","validMoves","validMove","isAcolumnOfFour","isArowOfFour","isAcolumnOfThree","isARowOfThree","createBoard","randomColorArrangament","randomNumberfrom0to5","randomColor","push","Timer","setInterval","clearInterval","className","children","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","score","_c","$RefreshReg$"],"sources":["/Users/yavuzhanis/Desktop/Yavuzhan-BütünBelgeler/YavuzhanYazılımKlasör/clonePROJECTS/candyCrush-react/candy-crush/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport ScoreBoard from './components/ScoreBoard'\nimport blueCandy from './images/blue-candy.png';\nimport redCandy from './images/red-candy.png';\nimport greenCandy from './images/green-candy.png';\nimport yellowCandy from './images/yellow-candy.png';\nimport purpleCandy from './images/purple-candy.png';\nimport orangeCandy from './images/orange-candy.png';\nimport blank from './images/blank.png';\n\n\n\n\n\nconst width = 8\nconst candyColors = [\n  blueCandy,\n  greenCandy,\n  yellowCandy,\n  orangeCandy,\n  redCandy,\n  purpleCandy\n]\n\nfunction App() {\n  const [currentColorArrangament, setCurrentColorArrangament] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0)\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + (width * 2), i + (width * 3)]\n      const decidedColor = currentColorArrangament[i]\n\n      if (columnOfFour.every(square => currentColorArrangament[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangament[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3]\n      const decidedColor = currentColorArrangament[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      if (rowOfFour.every(square => currentColorArrangament[square] === decidedColor)) {\n        rowOfFour.forEach(square => currentColorArrangament[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + (width * 2)]\n      const decidedColor = currentColorArrangament[i]\n\n      if (columnOfThree.every(square => currentColorArrangament[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangament[square] = blank)\n        return true\n\n      }\n    }\n  }\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2]\n      const decidedColor = currentColorArrangament[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      if (rowOfThree.every(square => currentColorArrangament[square] === decidedColor)) {\n        rowOfThree.forEach(square => currentColorArrangament[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const moveIntoSquareBelow = () => {\n\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if (isFirstRow && currentColorArrangament[i] == blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length)\n        currentColorArrangament[i] = candyColors[randomNumber]\n      }\n      if ((currentColorArrangament[i + width]) === blank) {\n        currentColorArrangament[i + width] = currentColorArrangament[i]\n        currentColorArrangament[i] = blank\n      }\n    }\n\n  }\n  const dragStart = (e) => {\n    console.log('drag Start')\n    setSquareBeingDragged(e.target)\n  }\n  const dragDrop = (e) => {\n    console.log('drag drop')\n    setSquareBeingReplaced(e.target)\n  }\n  const dragEnd = (e) => {\n    console.log('drag end')\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n    const squareBeingReplaceId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n    currentColorArrangament[squareBeingReplaceId] = squareBeingDragged.getAttribute('src')\n    currentColorArrangament[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n    console.log('square being dragged ID : ', squareBeingDraggedId)\n    console.log('squareBeingReplace ID : ', squareBeingReplaceId)\n\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width\n    ]\n    const validMove = validMoves.includes(squareBeingReplaceId)\n\n    const isAcolumnOfFour = checkForColumnOfFour();\n    const isArowOfFour = checkForRowOfFour();\n    const isAcolumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if ( squareBeingReplaceId && \n      validMove && (isARowOfThree || isArowOfFour || isAcolumnOfFour || isAcolumnOfThree )){\n        setSquareBeingDragged(null)\n        setSquareBeingReplaced(null)\n      }else {\n        currentColorArrangament [squareBeingReplaceId] = squareBeingReplaced.getAttribute('src')\n        currentColorArrangament[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n        setCurrentColorArrangament([...currentColorArrangament])\n\n      }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangament = []\n    for (let i = 0; i < width * width; i++) {\n      const randomNumberfrom0to5 = Math.floor(Math.random() * candyColors.length)\n      const randomColor = candyColors[randomNumberfrom0to5]\n      randomColorArrangament.push(randomColor)\n    };\n    setCurrentColorArrangament(randomColorArrangament)\n  };\n  useEffect(() => {\n    createBoard();\n  }, [width]);\n\n  useEffect(() => {\n    const Timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangament([...currentColorArrangament]);\n    }, 100)\n    return () => clearInterval(Timer)\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangament])\n\n\n  return (\n    <div className=\"App\">\n      <div className='game'>\n        {currentColorArrangament.map((candyColor, index) => (\n          <img\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}